name: Deploy to Kubernetes Development

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  EKS_CLUSTER: energy-company-dev
  JAVA_VERSION: '21'
  NODE_VERSION: '23'

jobs:
  # Run CI first
  run-ci:
    name: Build and Test
    uses: ./.github/workflows/ci.yml

  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    needs: run-ci
    if: success()
    outputs:
      changed-services: ${{ steps.changes.outputs.services }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Detect changed services
      id: changes
      run: |
        # Same change detection logic as before
        # ... (keeping the existing logic)

  build-and-deploy:
    name: Build and Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Build steps remain the same...
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      if: matrix.service != 'energy-company-client'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Build and push image to ECR
      env:
        ECR_REPOSITORY: energy-company-${{ matrix.service }}-dev
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Same ECR build and push logic
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # The magic happens here - much simpler than ECS!
    - name: Create Kubernetes Secrets from GitHub Secrets
      run: |
        # Create database secrets using GitHub Secrets
        kubectl create secret generic consumption-db-secret \
          --from-literal=url="${{ secrets.CONSUMPTION_DB_URL }}" \
          --from-literal=username="${{ secrets.CONSUMPTION_DB_USERNAME }}" \
          --from-literal=password="${{ secrets.CONSUMPTION_DB_PASSWORD }}" \
          -n energy-company-dev \
          --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl create secret generic customer-db-secret \
          --from-literal=url="${{ secrets.CUSTOMER_DB_URL }}" \
          --from-literal=username="${{ secrets.CUSTOMER_DB_USERNAME }}" \
          --from-literal=password="${{ secrets.CUSTOMER_DB_PASSWORD }}" \
          -n energy-company-dev \
          --dry-run=client -o yaml | kubectl apply -f -
        
        echo "‚úÖ Database secrets created from GitHub Secrets"

    - name: Deploy to Kubernetes
      run: |
        # Deploy the service
        kubectl apply -f k8s/${{ matrix.service }}.yaml
        
        # Update image in Kubernetes deployment
        kubectl set image deployment/${{ matrix.service }} \
          ${{ matrix.service }}=$ECR_REGISTRY/energy-company-${{ matrix.service }}-dev:${{ github.sha }} \
          -n energy-company-dev
        
        # Wait for rollout to complete
        kubectl rollout status deployment/${{ matrix.service }} -n energy-company-dev
        
        echo "‚úÖ ${{ matrix.service }} deployed successfully to Kubernetes!"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-deploy]
    if: always()
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          // Same notification logic but for Kubernetes
          const status = '${{ needs.build-and-deploy.result }}' === 'success' ? 'üöÄ Deployed to Kubernetes!' : '‚ùå Deployment Failed';
          // ... rest of notification logic
